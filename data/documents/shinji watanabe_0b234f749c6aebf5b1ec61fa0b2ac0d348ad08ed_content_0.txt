Title: TORCHAUDIO 2.1: ADVANCING SPEECH RECOGNITION, SELF-SUPERVISED LEARNING, AND AUDIO PROCESSING COMPONENTS FOR PYTORCH
Authors: Jeff Hwang, Moto Hira, Caroline Chen, Xiaohui Zhang, Zhaoheng Ni, Guangzhi Sun, Pingchuan Ma, Ruizhe Huang, Vineel Pratap, Yuekai Zhang, Anurag Kumar, Chin-Yun Yu, Chuang Zhu, Chunxi Liu, Jacob Kahn, Mirco Ravanelli, Peng Sun, Shinji Watanabe, Yangyang Shi, Yumeng Tao, Robin Scheibler, Samuele Cornell, Sean Kim, Stavros Petridis
Section: A. USAGE EXAMPLES
# Stream audio and video from media devices r = torchaudio.io.StreamReader( # Use cameras and mics in macOS format="avfoundation", # Pick the first video device and # third audio device src="0:2", # Configure the frame rate of the camera option={"framerate": "30"}, ) r.add_basic_audio_stream( frames_per_chunk=1600, sample_rate=8000, ) r.add_basic_video_stream( frames_per_chunk=5, frame_rate=25, # change frame rate width=224, # change width and height height=196, ) for (audio, video,) in r.stream(): # Live stream audio and video using # Real-Time Messaging Protocol w = torchaudio.io.StreamWriter( dst="rtmp://localhost:80", format="flv") w.add_audio_stream( sample_rate=8000, num_channels=1) w.add_video_stream( frame_rate=30, width=128, height=96) with w.open(option={"listen": "1"}): for (video_chunk, audio_chunk) in generator(): w.write_audio_chunk(0, audio_chunk) w.write_video_chunk(1, video_chunk) Fig. 4. Sample code that uses StreamWriter to live-stream audiovisual data via Real-Time Messaging Protocol server.