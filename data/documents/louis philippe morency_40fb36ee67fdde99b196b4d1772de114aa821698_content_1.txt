Title: MULTIZOO & MULTIBENCH: A Standardized Toolkit for Multimodal Deep Learning
Authors: Paul Pu Liang, Yiwei Lyu, Xiang Fan, Arav Agarwal, Yun Cheng, Louis-Philippe Morency, Ruslan Salakhutdinov, Antti Honkela
Section: 2 MULTIBENCH and MULTIZOO
Actions workflows, which automatically runs the test builds and is triggered every time new changes are incorporated. After making the desired changes and making sure all tests pass, users can create a pull request and the authors will merge these changes into the main branch. Together: In Algorithm 1, we show a sample code snippet in Python that loads a dataset, defines the unimodal and multimodal architectures, optimization objective, and training procedures, before running the evaluation protocol. Our toolkit is easy to use and trains models in less than 10 lines of code. By standardizing the implementation of each module and disentangling individual modules, optimizations, and training, MULTIZOO ensures accessibility and reproducibility of its algorithms. Algorithm 1 PyTorch code integrating MULTIBENCH datasets and MULTIZOO models. from datasets.get_data import get_dataloader from unimodals.common_models import ResNet, Transformer from fusions.common_fusions import MultInteractions from training_structures.gradient_blend import train, test # load Multimodal IMDB dataset traindata, validdata, testdata = get_dataloader(’multimodal_imdb’) out_channels = 3 # define ResNet and Transformer unimodal encoders encoders = [ResNet(in_channels=1, out_channels=3, layers=5), Transformer(in_channels=1, out_channels=3, layers=3)] # define a Multiplicative Interactions fusion layer fusion = MultInteractions([out_channels*8, out_channels*32], out_channels*32, ’matrix’) classifier = MLP(out_channels*32, 100, labels=23) # train using Gradient Blend algorithm model = train(encoders, fusion, classifier, traindata, validdata, epochs=100, optimtype=torch.optim.SGD, lr=0.01, weight_decay=0.0001) # test performance, complexity, robustness = test(model, testdata)