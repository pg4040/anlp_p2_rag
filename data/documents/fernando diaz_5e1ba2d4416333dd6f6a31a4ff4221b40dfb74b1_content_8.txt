Title: Overview of the TREC 2021 Fair Ranking Track
Authors: Michael D. Ekstrand, Graham McDonald
Section: A Alignments
6.52642517e-03, 3.31146285e-06]]) Coordinates: * geography (geography) object ’Unknown’ ’Africa’ ... ’Oceania’ * gender (gender) object ’unknown’ ’female’ ’male’ ’third’ Now we can unravel this and drop the first entry: q tm.values.ravel()[1:] array([2.74270639e-02, 5.03941651e-02, 3.91061453e-04, 8.17328395e-02, 6.61502352e-03, 5.83910794e-03, 9.60166894e-05, 6.16114376e-08, 4.73300933e-09, 4.73300933e-09, 9.56163501e-11, 2.89435265e-01, 2.01028882e-02, 2.28961843e-02, 3.71633817e-04, 1.87231499e-01, 6.74645100e-03, 1.80748185e-02, 6.41866532e-05, 4.66104719e-02, 3.88031961e-03, 3.72513649e-03, 5.33101956e-05, 1.15699041e-01, 5.86585240e-03, 2.18497134e-02, 3.07217202e-05, 7.72424054e-02, 1.09501611e-03, 6.52642517e-03, 3.31146285e-06]) Implementation Now, to do this for every query, we’ll use a function that takes a data frame for a query’s relevant docs and performs all of the above operations: def query xalign(qdf): pages = qdf['page id'] pages = pages[pages.isin(page xalign.indexes['page'])] q xa = page xalign.loc[pages.values, :, :] q am = q xa.sum(axis=0) # clear and normalize q am[0, 0] = 0 q am = q am / q am.sum() # compute fractions in each section q fk all = q am[1:, 1:].sum() q fk geo = q am[1:, :1].sum() q fk gen = q am[:1, 1:].sum() # known average q am[1:, 1:] *= 0.5 q am[1:, 1:] += int tgt * 0.5 * q fk all # known-geo average q am[1:, :1] *= 0.5 q am[1:, :1] += geo tgt xa * 0.5 * q fk geo # known-gender average q am[:1, 1:] *= 0.5 q am[:1, 1:] += gender tgt xa * 0.5 * q fk gen # and return the result return pd.Series(q am.values.ravel()[1:]) query xalign(qdf) 0 2.742706e-02 1 5.039417e-02 2 3.910615e-04 3 8.173284e-02 4 6.615024e-03 5 5.839108e-03 6 9.601669e-05 7 6.161144e-08 8 4.733009e-09 9 4.733009e-09 10 9.561635e-11 11 2.894353e-01 12 2.010289e-02 13 2.289618e-02 14 3.716338e-04 15 1.872315e-01 16 6.746451e-03 17 1.807482e-02 18 6.418665e-05 19 4.661047e-02 20 3.880320e-03 21 3.725136e-03 22 5.331020e-05 23 1.156990e-01 24 5.865852e-03 25 2.184971e-02 26 3.072172e-05 27 7.724241e-02 28 1.095016e-03 29 6.526425e-03 30 3.311463e-06 dtype: float64 Now with that function, we can compute the alignment vector for each query. train qtarget = train qrels.groupby('id').apply(query xalign) train qtarget 0 1 2 3 4 5 6 \ id 1 0.027427 0.050394 0.000391 0.081733 0.006615 0.005839 0.000096 2 0.012235 0.032073 0.000232 0.073168 0.003571 0.003669 0.000070 3 0.022553 0.035541 0.000292 0.023527 0.040981 0.059556 0.000574 4 0.012472 0.029112 0.000209 0.094840 0.004409 0.004901 0.000086 5 0.023416 0.063398 0.000436 0.020521 0.024932 0.025194 0.000504 6 0.126820 0.201558 0.001691 0.000021 0.028097 0.030215 0.000519 7 0.050837 0.115432 0.000836 0.000026 0.034747 0.051416 0.000646 8 0.038785 0.054361 0.000521 0.000065 0.038044 0.038746 0.000702 9 0.059002 0.157276 0.001087 0.005630 0.028051 0.056632 0.000554 10 0.064617 0.137545 0.001016 0.046254 0.008038 0.008038 0.000162 11 0.060435 0.128320 0.000979 0.029760 0.020073 0.021687 0.000358 12 0.020151 0.038214 0.000332 0.007651 0.032456 0.032725 0.000653