Title: Overview of the TREC 2021 Fair Ranking Track
Authors: Michael D. Ekstrand, Graham McDonald
Section: A Alignments
id 1 0.058874 0.155616 0.092068 2 0.056101 0.139166 0.025553 3 0.093069 0.104018 0.027832 4 0.082806 0.209447 0.025190 5 0.075427 0.449904 0.006992 And we can prepare a metric and save it: t1 train metric = metrics.Task1Metric(train qrels.set index('id'), page kga, train qtarget) binpickle.dump(t1 train metric, 'task1-train-geo-metric.bpk', codec=codec) INFO:binpickle.write:pickled 337312647 bytes with 5 buffers Eval Queries Do the same thing for the eval data for a geo-only eval metric: eval qalign = eval qrels.join(page kga, on='page id').drop(columns=['page id']).groupby('id').sum() eqa sums = eval qalign.sum(axis=1) eval qalign = eval qalign.divide(eqa sums, axis=0) eval qtarget = (eval qalign + world pop) * 0.5 t1 eval metric = metrics.Task1Metric(eval qrels.set index('id'), page kga, eval qtarget) binpickle.dump(t1 eval metric, 'task1-eval-geo-metric.bpk', codec=codec) INFO:binpickle.write:pickled 337312643 bytes with 5 buffers A.5.2 Intersectional Alignment Now we need to apply similar logic, but for the intersectional (geography * gender) alignment. As noted as above, we need to carefully handle the unknown cases. Demo To demonstrate how the logic works, let’s first work it out in cells for one query (1). What are its documents? qdf = qrels[qrels['id'] == 1] qdf.name = 1 qdf id page_id 0 1 572 1 1 627 2 1 903 3 1 1193 4 1 1542 ... .. ... 6959 1 67066971 6960 1 67075177 6961 1 67178925 6962 1 67190032 6963 1 67244439 [6964 rows x 2 columns] We can use these page IDs to get its alignments: q xa = page xalign.loc[qdf['page id'].values, :, :] q xa <xarray.DataArray (page: 6964, geography: 8, gender: 4)> array([[[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], ..., [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]], [[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], ..., [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]], [[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], ..., ... ..., [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]], [[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], ..., [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]], [[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.], ..., [0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]]) Coordinates: * page (page) int64 572 627 903 1193 ... 67178925 67190032 67244439 * geography (geography) object ’Unknown’ ’Africa’ ... ’Oceania’ * gender (gender) object ’unknown’ ’female’ ’male’ ’third’ Summing over the first axis (’page’) will produce an alignment matrix: q am = q xa.sum(axis=0)